Basic Routing

The most basic Laravel routes accept a URI and a Closure, providing a very simple and expressive method of defining routes:

Route::get('foo', function () {
    return 'Hello World';
});

The Default Route Files
All Laravel routes are defined in your route files, which are located in the routes directory. These files are automatically loaded by the framework. 

The routes/web.php file defines routes that are for your web interface. These routes are assigned the web middleware group, which provides features like session state and CSRF protection. 
The routes in routes/api.php are stateless and are assigned the api middleware group.

For most applications, you will begin by defining routes in your routes/web.php file. The routes defined in routes/web.php may be accessed by entering the defined route's URL in your browser. 
For example, you may access the following route by navigating to http://your-app.test/user in your browser:

Route::get('/user', 'UserController@index');

Available Router Methods

The router allows you to register routes that respond to any HTTP verb:

Route::get($uri, $callback);
Route::post($uri, $callback);
Route::put($uri, $callback);
Route::patch($uri, $callback);
Route::delete($uri, $callback);
Route::options($uri, $callback);

Sometimes you may need to register a route that responds to multiple HTTP verbs. You may do so using the match method. Or, you may even register a route that responds to all HTTP verbs using the any method:

Route::match(['get', 'post'], '/', function () {
    //
});

Route::any('foo', function () {
    //
});

-------------------------------

URL::route gets the URL to a named route. So in your case, if you name your route like this:

Route::get('/account/register', [
    'as' => 'register', 
    'uses' => 'RegisterController@create'
]);

then you will be able to use

<a href="{{ URL::route('register') }}" >Register 1</a>
in blade



Url::route is used only if you have named routes. So if I called my route "my route" then I could call it like so: URL::route('my route');

But if you want to direct to a route that only has a destination and is not named, then you should use URL::to

------------------------------------


Route::get('/table/{number?}', 'TableController@create')->where('number', '[0-9]+');

//The best part is that you do not need to define all the CRUD routes individually in the web.php file.Just define the resource route for the controller in web.php file:
//This single declaration will create several routes to handle BooksController requests. 
Route::resource('book', 'BookController');

//Route::resource('book', 'BookController', ['only' => [
//        'index', 'show'
//]]);

//Route::resource('book', 'BookController', ['except' => [
//        'create', 'store', 'update', 'destroy'
//]]);